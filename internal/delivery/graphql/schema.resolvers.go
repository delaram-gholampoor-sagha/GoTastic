package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/delaram/GoTastic/internal/delivery/graphql/model"
	"github.com/delaram/GoTastic/internal/domain"
	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, description string, dueDate time.Time, fileID *string) (*model.Todo, error) {
	var fid string
	if fileID != nil {
		fid = *fileID
	}
	created, err := r.TodoUC.CreateTodoItem(ctx, description, dueDate, fid) // (*domain.TodoItem)
	if err != nil {
		return nil, err
	}
	return toModelTodoPtr(created), nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, description string, dueDate time.Time, fileID *string) (bool, error) {
	uid, err := uuid.Parse(id)
	if err != nil {
		return false, err
	}
	var fid string
	if fileID != nil {
		fid = *fileID
	}
	err = r.TodoUC.UpdateTodoItem(ctx, &domain.TodoItem{
		ID: uid, Description: description, DueDate: dueDate, FileID: fid,
	})
	if err != nil {
		return false, err
	}
	return true, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	if err := r.TodoUC.DeleteTodoItem(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, file graphql.Upload) (string, error) {
	return r.FileUC.UploadFile(ctx, file.File, file.Filename)
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, id string) (bool, error) {
	if err := r.FileUC.DeleteFile(ctx, id); err != nil {
		return false, err
	}
	return true, nil
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (string, error) {
	return "ok", nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	items, err := r.TodoUC.ListTodoItems(ctx) // ([]*domain.TodoItem)
	if err != nil {
		return nil, err
	}
	return toModelTodosPtr(items), nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	item, err := r.TodoUC.GetTodoItem(ctx, id) // (*domain.TodoItem or nil)
	if err != nil {
		return nil, err
	}
	return toModelTodoPtr(item), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
